<!--
    Environment for BLISS
    This template handles all general messages and loads the appropriate Java classes
-->
<behaviourtemplates>
    <is name="env">
        {
            "temp": { "newenvmsgs":[], "newenvresponses":[], "newenvoutmsgs": [] },
            "initialized":false,
            "initnoerror":false,
            "environmentSpec": {
                "environments": [
                    {
                        "id" : "mw", "loader":"nl.bliss.environments.GenericMiddlewareEnvironment", "requiredloaders":[],
                        "params" : {
                            "middleware": {
                                "loaderClass": "nl.utwente.hmi.middleware.activemq.ActiveMQMiddlewareLoader",
                                "properties": {
                                    "iTopic": "BLISS/in",
                                    "oTopic": "BLISS/out",
                                    "amqBrokerURI": "tcp://localhost:61616"
                                }
                            }
                        }
                    },
                    {
                        "id": "gui","loader":"nl.bliss.environments.GUIEnvironment","requiredloaders":["mw"]
                    },
                    {
                        "id" : "tts", "loader":"nl.bliss.environments.TTSEnvironment", "requiredloaders": ["mw"],
                        "params" : {
                            "realizer": {
                                "type":"ReadSpeaker",
                                "properties": {
                                    "language":"en_us",
                                    "voice":"James",
                                    "streaming":"0",
                                    "audioformat":"pcm"
                                }
                            }
                        }
                    },
                    {
                        "id" : "um", "loader":"nl.bliss.environments.UMEnvironment", "requiredloaders":["mw"],
                            "params" : {
                                "db" : "default",
                                "name": "users",
                                "reset": false,
                                "event": "cb"
                        }
                    },
                    {
                        "id" : "nvlg", "loader":"nl.bliss.environments.NVLGEnvironment", "requiredloaders": ["um","tts"],
                        "params" : {
                            "intents": "./behaviour/agentmoves_EN_CB.json",
                            "url": "http://things.ewi.utwente.nl:8190/",
<!--                            "urlMemory": "http://127.0.0.1:5000",-->
                            "urlMemory": "http://things.ewi.utwente.nl:5000",
                            "language" : "en"

                        }
                    },
                    {
                        "id" : "nvlu", "loader":"nl.bliss.environments.NVLUEnvironment", "requiredloaders": ["um"],
                        "params" : {
                            "intents" : "./behaviour/usermoves_EN.json",
                            "url": "http://things.ewi.utwente.nl:8190/",
                            "language" : "en"
                        }
                    },
                    {
                        "id" : "auth", "loader":"nl.bliss.environments.AuthenticationEnvironment", "requiredloaders": [],
                        "params" : {
                            "identification": {
                               "type": "gui"
                                <!-- "type":"rfid",
                                "properties":{
                                    "port":"COM3",
                                    "delay":3,
                                    "timeunit":"SECONDS"
                                } -->
                            }
                        }
                    }
                ]
            }
        }
    </is>
    <javascript><![CDATA[



        function oLength(element){
            return Object.keys(element).length;
        }

        function prnt(val) {
	        print(JSON.stringify(val));
	        return true;
        }

        //Checks if a JSON object is completely empty
        var _cache = {}
        function isEmpty(obj){
            var json = JSON.stringify(obj);
            if (undefined !== _cache[json]) {
                return _cache[json];
            }
            var res = true;
            for (var prop in obj) {
                if (! obj.hasOwnProperty(prop)) { continue; }
                var type = typeof obj[prop];
                switch (type){
                    case "object":
                        res = isEmpty(obj[prop]);
                        break;
                    case "boolean":
                    case "number":
                        res = false; // boolean cannot be "empty", also 0 is not empty
                        break;
                    case "string":
                        res = ! obj[prop].length;
                        break;
                    case "undefined":
                        res = true;
                        break;
                    default:
                        res = !! obj[prop];
                        break;
                }
                if (!res) {break;}
            }
            _cache[json] = res; // Add the result to the cache.
            return res;
        }

        var ENV = (function() {
	        var messageQueue = [];
        	var listeners = [];
	        function register(msgtype, cb) {
		    listeners.push({ msgtype: msgtype, cb: cb });
	    }

	    function publishMsg(msgtype, msg) {
		    for (var i = 0; i < listeners.length; i++) {
			    if (listeners[i].msgtype == msgtype) {
				    listeners[i].cb(msg);
			    }
		    }
	    }

	    function handleEnvironmentMessages(msgs) {
		    for (var i = 0; i < msgs.length; i++) {
			    //print("msg > "+JSON.stringify(msgs[i]));
			    publishMsg(msgs[i].cmd, msgs[i]);
		    }
		return [];
	    }

	    function handleEnvironmentResponses(msgs) {
		    for (var i = 0; i < msgs.length; i++) {
			//print("res > "+JSON.stringify(msgs[i]));
			publishMsg(msgs[i].cmd, msgs[i]);
		    }
		return [];
	    }

	    function haveMessagesQueued() {
		    return messageQueue.length > 0;
	    }

	    function queueMessage(environment, cmd, params) {
		    var msgId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
		    messageQueue.push({
			    environment: environment,
			    cmd: cmd,
			    msgId: msgId,
			    params: params
		    });
		    return msgId;
	    }

	function queueResponse(respondTo, params) {
		messageQueue.push({
			environment: respondTo.environment,
			cmd: respondTo.cmd,
			msgId: respondTo.msgId,
			params: params
		});
		return respondTo.msgId;
	}

	function getEntireMessageQueue() {
		var res = messageQueue;
		messageQueue = [];
		return res;
	}

    return {
    	register: register,
        handleEnvironmentMessages: handleEnvironmentMessages,
        queueMessage: queueMessage,
        handleEnvironmentResponses: handleEnvironmentResponses,
        haveMessagesQueued: haveMessagesQueued,
        getEntireMessageQueue: getEntireMessageQueue,
        queueResponse: queueResponse,
        isInitialized: function() {
        	return is.env.initialized && is.env.initnoerror;
        }
    };
})();
]]></javascript>

    <!-- Initialize environments -->
    <template id="env000" name="InitENV">
        <preconditions>
            <condition><![CDATA[!is.env.initialized]]></condition>
        </preconditions>
        <initeffects>
            <method name="init" is="is.env.initnoerror">
                <object persistent="is.env.persistent.BUS" class="hmi.flipper2.environment.FlipperEnvironmentBus">
                    <constructors>
                        <value db="default"/>
                    </constructors>
                </object>
                <arguments>
                    <value class="String" is="is.env.environmentSpec" is_type="JSONString"/>
                </arguments>
            </method>
            <assign is="is.env.initialized">true</assign>
        </initeffects>
    </template>

    <!-- Get Messages -->
    <template id="env100" name="ENVMessages IN">
        <preconditions>
            <condition><![CDATA[ ENV.isInitialized() ]]></condition>
            <method name="hasMessages">
                <object persistent="is.env.persistent.BUS" class="hmi.flipper2.environment.FlipperEnvironmentBus"/>
            </method>
        </preconditions>
        <effects>
            <method name="getMessages" is="is.env.temp.newenvmsgs" is_type="JSONString">
                <object persistent="is.env.persistent.BUS" class="hmi.flipper2.environment.FlipperEnvironmentBus" />
            </method>
            <assign is="is.env.temp.newenvmsgs"><![CDATA[ ENV.handleEnvironmentMessages(is.env.temp.newenvmsgs); ]]></assign>
        </effects>
    </template>

    <!-- Send Messages -->
    <template id="env101" name="ENVMessages OUT">
        <preconditions>
            <condition><![CDATA[ is.env.initialized ]]></condition>
            <condition><![CDATA[ !is.env.initerror ]]></condition>
            <condition><![CDATA[ ENV.haveMessagesQueued() ]]></condition>
        </preconditions>
        <effects>
            <assign is="is.env.temp.newenvoutmsgs"><![CDATA[ ENV.getEntireMessageQueue() ]]></assign>
            <method name="sendMessages" is="is.env.temp.newenvresponses" is_type="JSONString">
                <object persistent="is.env.persistent.BUS" class="hmi.flipper2.environment.FlipperEnvironmentBus" />
                <arguments>
                    <value class="String" is="is.env.temp.newenvoutmsgs" is_type="JSONString"/>
                </arguments>
            </method>
            <assign is="is.env.temp.newenvresponses"><![CDATA[ ENV.handleEnvironmentResponses(is.env.temp.newenvresponses); ]]></assign>
        </effects>
    </template>

</behaviourtemplates>